const mongoose = require('mongoose');

const quoteSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true
  },
  email: {
    type: String,
    required: true,
    trim: true,
    lowercase: true,
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please enter a valid email']
  },
  phone: {
    type: String,
    required: true,
    trim: true
  },
  company: {
    type: String,
    trim: true
  },
  product: {
    type: String,
    trim: true
  },
  quantity: {
    type: String,
    trim: true
  },
  message: {
    type: String,
    required: true,
    trim: true
  },
  specifications: {
    material: String,
    grade: String,
    dimensions: String,
    thickness: String,
    finish: String,
    tolerance: String,
    other: String
  },
  delivery: {
    address: String,
    city: String,
    state: String,
    country: String,
    zipCode: String,
    preferredDate: Date,
    urgency: {
      type: String,
      enum: ['standard', 'urgent', 'rush'],
      default: 'standard'
    }
  },
  status: {
    type: String,
    enum: ['new', 'reviewing', 'quoted', 'accepted', 'rejected', 'expired'],
    default: 'new'
  },
  priority: {
    type: String,
    enum: ['low', 'medium', 'high', 'urgent'],
    default: 'medium'
  },
  assignedTo: {
    type: String,
    trim: true
  },
  quoteDetails: {
    unitPrice: Number,
    totalPrice: Number,
    currency: {
      type: String,
      default: 'USD'
    },
    validity: Date,
    terms: String,
    notes: String,
    quotedBy: String,
    quotedAt: Date
  },
  response: {
    type: String,
    trim: true
  },
  responseDate: {
    type: Date
  },
  followUpDate: {
    type: Date
  },
  notes: [{
    note: String,
    addedBy: String,
    addedAt: {
      type: Date,
      default: Date.now
    }
  }],
  attachments: [{
    filename: String,
    originalName: String,
    path: String,
    uploadedAt: {
      type: Date,
      default: Date.now
    }
  }],
  tags: [{
    type: String,
    trim: true
  }],
  source: {
    type: String,
    default: 'website',
    enum: ['website', 'phone', 'email', 'referral', 'trade-show', 'other']
  },
  ipAddress: {
    type: String
  },
  userAgent: {
    type: String
  },
  referrer: {
    type: String
  }
}, {
  timestamps: true
});

// Indexes for better search performance
quoteSchema.index({ email: 1 });
quoteSchema.index({ status: 1 });
quoteSchema.index({ priority: 1 });
quoteSchema.index({ createdAt: -1 });
quoteSchema.index({ name: 'text', company: 'text', product: 'text', message: 'text' });

// Virtual for quote number
quoteSchema.virtual('quoteNumber').get(function() {
  return `Q-${this._id.toString().slice(-8).toUpperCase()}`;
});

// Virtual for formatted phone number
quoteSchema.virtual('formattedPhone').get(function() {
  const phone = this.phone.replace(/\D/g, '');
  if (phone.length === 11 && phone.startsWith('1')) {
    return `+1 (${phone.slice(1, 4)}) ${phone.slice(4, 7)}-${phone.slice(7)}`;
  }
  return this.phone;
});

// Virtual for time since submission
quoteSchema.virtual('timeSinceSubmission').get(function() {
  const now = new Date();
  const diff = now - this.createdAt;
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const days = Math.floor(hours / 24);
  
  if (days > 0) {
    return `${days} day${days > 1 ? 's' : ''} ago`;
  } else if (hours > 0) {
    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
  } else {
    return 'Just now';
  }
});

// Virtual for estimated value
quoteSchema.virtual('estimatedValue').get(function() {
  if (this.quoteDetails && this.quoteDetails.totalPrice) {
    return this.quoteDetails.totalPrice;
  }
  return null;
});

// Method to generate quote
quoteSchema.methods.generateQuote = function(quoteDetails, quotedBy) {
  this.status = 'quoted';
  this.quoteDetails = {
    ...quoteDetails,
    quotedBy,
    quotedAt: new Date()
  };
  this.notes.push({
    note: `Quote generated by ${quotedBy}`,
    addedBy: quotedBy
  });
  return this.save();
};

// Method to accept quote
quoteSchema.methods.acceptQuote = function(acceptedBy) {
  this.status = 'accepted';
  this.notes.push({
    note: `Quote accepted by ${acceptedBy}`,
    addedBy: acceptedBy
  });
  return this.save();
};

// Method to reject quote
quoteSchema.methods.rejectQuote = function(reason, rejectedBy) {
  this.status = 'rejected';
  this.notes.push({
    note: `Quote rejected by ${rejectedBy}. Reason: ${reason}`,
    addedBy: rejectedBy
  });
  return this.save();
};

// Method to add note
quoteSchema.methods.addNote = function(note, addedBy) {
  this.notes.push({
    note,
    addedBy
  });
  return this.save();
};

// Method to update status
quoteSchema.methods.updateStatus = function(status, updatedBy) {
  this.status = status;
  this.notes.push({
    note: `Status changed to ${status}`,
    addedBy: updatedBy
  });
  return this.save();
};

// Static method to get new quotes
quoteSchema.statics.getNew = function(limit = 50) {
  return this.find({ status: 'new' }).sort({ createdAt: -1 }).limit(limit);
};

// Static method to get quotes by status
quoteSchema.statics.getByStatus = function(status, limit = 50) {
  return this.find({ status }).sort({ createdAt: -1 }).limit(limit);
};

// Static method to get quotes by priority
quoteSchema.statics.getByPriority = function(priority, limit = 50) {
  return this.find({ priority }).sort({ createdAt: -1 }).limit(limit);
};

// Static method to get quotes requiring follow-up
quoteSchema.statics.getFollowUpRequired = function() {
  return this.find({
    followUpDate: { $lte: new Date() },
    status: { $in: ['new', 'reviewing', 'quoted'] }
  }).sort({ followUpDate: 1 });
};

// Static method to get expired quotes
quoteSchema.statics.getExpired = function() {
  return this.find({
    'quoteDetails.validity': { $lt: new Date() },
    status: { $in: ['quoted'] }
  });
};

// Static method to get quote statistics
quoteSchema.statics.getStats = async function() {
  const stats = await this.aggregate([
    {
      $group: {
        _id: '$status',
        count: { $sum: 1 },
        totalValue: { $sum: '$quoteDetails.totalPrice' }
      }
    }
  ]);
  
  const total = await this.countDocuments();
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const todayCount = await this.countDocuments({ createdAt: { $gte: today } });
  
  const totalValue = await this.aggregate([
    { $match: { status: 'accepted' } },
    { $group: { _id: null, total: { $sum: '$quoteDetails.totalPrice' } } }
  ]);
  
  return {
    total,
    today: todayCount,
    totalValue: totalValue[0]?.total || 0,
    byStatus: stats.reduce((acc, stat) => {
      acc[stat._id] = {
        count: stat.count,
        value: stat.totalValue || 0
      };
      return acc;
    }, {})
  };
};

module.exports = mongoose.model('Quote', quoteSchema);
